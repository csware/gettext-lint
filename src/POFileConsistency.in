#!@PYTHON@
# -*- mode: Python; coding: utf-8; -*-

# PO file consistency checker
# 
# Pedro Morais <morais@kde.org>
# Jos√© Nuno Pires <jncp@netcabo.pt>
# (c) Copyright 2003, 2004
# Distributable under the terms of the GPL - see COPYING

import sys
import getopt
if not "@prefix@/share/@PACKAGE@" in sys.path:
    sys.path.append("@prefix@/share/@PACKAGE@")
from POFile import POFile
from Equivalent import Equivalent
from util import Output

def usage(code = -1):
    w = sys.stderr.write
    w('Usage: POFileConsistency [OPTION] <FILE>...\n')
    w('\n')
    w('Mandatory arguments to long options are mandatory '
      'for short options too.\n')
    w('\n')
    w('Options:\n')
    w('  -h, --help                 show this help\n')
    w('  -e, --equivalent=<file>    load an equivalences file\n')
    w('  -o, --only-empty           only check empty msgstrs\n')
    w('  -m, --match=<file>         only check files matching this name\n')
    w('  -r, --strip-chars=<chars>  remove this chars from the msgids\n')
    sys.exit(code)

try:
    opts, args = getopt.getopt(sys.argv[1:], "hoe:m:r:",
                               ["help", "only-empty", "equivalent=",
                                "match=", "strip-chars="])
except getopt.GetoptError:
    usage()
equivalent = None
onlyempty = 0
match = None
strip = ''
for o, a in opts:
    if o in ("-h", "--help"): usage(0)
    if o in ("-o", "--only-empty"): onlyempty = 1
    if o in ("-e", "--equivalent"):
        import os
        fn = os.path.expandvars(a)
        equivalent = Equivalent(fn)
        equivalent.parse()
    if o in ("-m", "--match"): match = a
    if o in ("-r", "--strip-chars"): strip = a        
if len(args) < 1: usage()

map = {}
for filename in args:
    po = POFile(filename)
    po.ignoreFuzzy = 1
    if po.consistency(map, strip) == 0:
        sys.stderr.write('error parsing file %s\n' % filename)

def inconsistent(msgid, result):
    if len(result) < 2: return 0
    if equivalent != None and equivalent.check(msgid, result): return 0
    if onlyempty:
        ccc = 0
        for msgstr in result.keys():
            if not msgstr or not len(msgstr): ccc = 1
        if ccc == 0: return 0
    if match:
        ccc = 0
        for filenames in result.values():
            for filename, line in filenames:
                if filename.find(match) >= 0: ccc = 1
        if ccc == 0: return 0
    return 1
                        
out = Output("po-file-consistency")
for msgid, result in map.iteritems():
    if not inconsistent(msgid, result): continue
    out.opentag('inconsistency')
    out.opentag('msgid', body = msgid, close = 1)
    for msgstr, filenames in result.iteritems():
        out.opentag('msgstr')
        out.opentag('content', body = msgstr, close = 1)
        for fx, message in filenames:
            out.opentag('filename', { 'message': str(message) },
                        body = fx, close = 1)
        out.closetag()
    out.closetag()
out.finish()
