#!@PYTHON@
# -*- mode: Python; coding: utf-8; -*-

# PO file consistency checker
# 
# Pedro Morais <morais@kde.org>
# Jos√© Nuno Pires <jncp@netcabo.pt>
# (c) Copyright 2003, 2004
# Distributable under the terms of the GPL - see COPYING

import sys
if not "@prefix@/share/@PACKAGE@" in sys.path:
    sys.path.append("@prefix@/share/@PACKAGE@")
from POFile import POFile
from Equivalent import Equivalent
from util import Output

def error():
    sys.stderr.write('Usage: POFileConsistency [--equivalent=<file>] [--only-empty] [--match=<string>] [--strip-chars=<chars>] <file> [<file ...]\n')
    sys.exit(-1)

if len(sys.argv) < 2: error()

start = 1

equivalent = None
if sys.argv[start][:13] == '--equivalent=':
    import os
    fn = os.path.expandvars(os.path.expanduser(sys.argv[start][13:]))
    equivalent = Equivalent(fn)
    equivalent.parse()
    start = start + 1
    if len(sys.argv) < start + 1: error()

onlyempty = 0
if sys.argv[start][:12] == '--only-empty':
    onlyempty = 1
    start = start + 1
    if len(sys.argv) < start + 1: error()

match = None
if sys.argv[start][:8] == '--match=':
    match = sys.argv[start][8:]
    start = start + 1
    if len(sys.argv) < start + 1: error()

strip = ''
if sys.argv[start][:14] == '--strip-chars=':
    strip = sys.argv[start][14:]
    start = start + 1
    if len(sys.argv) < start + 1: error()

map = {}
for filename in sys.argv[start:]:
    po = POFile(filename)
    if po.consistency(map, strip) == 0:
        sys.stderr.write('error parsing file %s\n' % filename)
                        
out = Output("po-file-consistency")
for msgid, result in map.iteritems():
    if len(result) < 2: continue
    if equivalent != None and equivalent.check(msgid, result): continue
    if onlyempty:
        ccc = 0
        for msgstr in result.keys():
            if not msgstr or not len(msgstr): ccc = 1
        if ccc == 0: continue
    if match:
        ccc = 0
        for filenames in result.values():
            for filename, line in filenames:
                if filename.find(match) >= 0: ccc = 1
        if ccc == 0: continue
    out.opentag('inconsistency')
    out.opentag('msgid', body = msgid, close = 1)
    for msgstr, filenames in result.iteritems():
        out.opentag('msgstr')
        out.opentag('content', body = msgstr, close = 1)
        for fx, message in filenames:
            out.opentag('filename', { 'message': str(message) },
                        body = fx, close = 1)
        out.closetag()
    out.closetag()
out.finish()
